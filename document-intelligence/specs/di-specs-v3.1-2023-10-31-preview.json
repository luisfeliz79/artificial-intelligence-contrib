{
  "openapi": "3.0.1",
  "info": {
    "title": "Document Intelligence (formerly Form Recognizer)",
    "description": "Extracts content, layout, and structured data from documents.",
    "version": "2023-10-31-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "servers": [
    {
      "url": "{server}/formrecognizer",
      "variables": {
        "server": {
          "default": "https://<name>.cognitiveservices.azure.com"
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "ApiKeyAuth": []
    },
    {
      "OAuth2Auth": [
        "https://cognitiveservices.azure.com/.default"
      ]
    }
  ],
  "tags": [],
  "paths": {
    "/documentClassifiers": {
      "get": {
        "description": "List all document classifiers.",
        "operationId": "DocumentClassifiers_ListClassifiers",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDocumentClassifierDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Document Classifiers": {
            "$ref": "./examples/GetDocumentClassifiers.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/documentClassifiers/{classifierId}": {
      "get": {
        "description": "Gets detailed document classifier information.",
        "operationId": "DocumentClassifiers_GetClassifier",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "classifierId",
            "in": "path",
            "description": "Unique document classifier name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentClassifierDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Document Classifier": {
            "$ref": "./examples/GetDocumentClassifier.json"
          }
        }
      },
      "delete": {
        "description": "Deletes document classifier.",
        "operationId": "DocumentClassifiers_DeleteClassifier",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "classifierId",
            "in": "path",
            "description": "Unique document classifier name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Document Classifier": {
            "$ref": "./examples/DeleteDocumentClassifier.json"
          }
        }
      }
    },
    "/documentClassifiers/{classifierId}:analyze": {
      "post": {
        "description": "Classifies document with document classifier.",
        "operationId": "DocumentClassifiers_ClassifyDocumentFromStream",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "classifierId",
            "in": "path",
            "description": "Unique document classifier name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "stringIndexType",
            "in": "query",
            "description": "Method used to compute string offset and length.",
            "schema": {
              "type": "string",
              "default": "textElements",
              "enum": [
                "textElements",
                "unicodeCodePoint",
                "utf16CodeUnit"
              ],
              "x-ms-enum": {
                "name": "StringIndexType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "textElements",
                    "value": "textElements",
                    "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
                  },
                  {
                    "name": "unicodeCodePoint",
                    "value": "unicodeCodePoint",
                    "description": "Character unit represented by a single unicode code point.  Used by Python 3."
                  },
                  {
                    "name": "utf16CodeUnit",
                    "value": "utf16CodeUnit",
                    "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
                  }
                ]
              },
              "x-ms-parameter-location": "method"
            },
            "x-ms-enum": {
              "name": "StringIndexType",
              "modelAsString": true,
              "values": [
                {
                  "name": "textElements",
                  "value": "textElements",
                  "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
                },
                {
                  "name": "unicodeCodePoint",
                  "value": "unicodeCodePoint",
                  "description": "Character unit represented by a single unicode code point.  Used by Python 3."
                },
                {
                  "name": "utf16CodeUnit",
                  "value": "utf16CodeUnit",
                  "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
                }
              ]
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "split",
            "in": "query",
            "description": "Document splitting mode.",
            "schema": {
              "type": "string",
              "default": "none",
              "enum": [
                "auto",
                "none",
                "perPage"
              ],
              "x-ms-enum": {
                "name": "SplitMode",
                "modelAsString": true,
                "values": [
                  {
                    "name": "auto",
                    "value": "auto",
                    "description": "Automatically split file into documents."
                  },
                  {
                    "name": "none",
                    "value": "none",
                    "description": "Treat the entire file as a single document."
                  },
                  {
                    "name": "perPage",
                    "value": "perPage",
                    "description": "Treat each page in the file as a separate document."
                  }
                ]
              },
              "x-ms-parameter-location": "method"
            },
            "x-ms-enum": {
              "name": "SplitMode",
              "modelAsString": true,
              "values": [
                {
                  "name": "auto",
                  "value": "auto",
                  "description": "Automatically split file into documents."
                },
                {
                  "name": "none",
                  "value": "none",
                  "description": "Treat the entire file as a single document."
                },
                {
                  "name": "perPage",
                  "value": "perPage",
                  "description": "Treat each page in the file as a separate document."
                }
              ]
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "requestBody": {
          "description": "Input content.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/pdf": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/jpeg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/png": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/tiff": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/bmp": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/heif": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "text/html": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true,
          "x-ms-parameter-location": "method"
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of AnalyzeResultOperation",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Classify Document from Url": {
            "$ref": "./examples/ClassifyDocument_Stream.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-codegen-request-body-name": "input"
      }
    },
    "/documentClassifiers/{classifierId}/analyzeResults/{resultId}": {
      "get": {
        "description": "Gets the result of document classifier.",
        "operationId": "DocumentClassifiers_GetClassifyResult",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "classifierId",
            "in": "path",
            "description": "Unique document classifier name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Analyze operation result ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeResultOperation"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Classify Document Result": {
            "$ref": "./examples/GetClassifyDocumentResult.json"
          }
        }
      }
    },
    "/documentClassifiers:build": {
      "post": {
        "description": "Builds a custom document classifier.",
        "operationId": "DocumentClassifiers_BuildClassifier",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "requestBody": {
          "description": "Build request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildDocumentClassifierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of DocumentClassifierBuildOperationDetails",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Build Document Classifier": {
            "$ref": "./examples/BuildDocumentClassifier.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-codegen-request-body-name": "buildRequest"
      }
    },
    "/documentModels": {
      "get": {
        "description": "List all document models",
        "operationId": "DocumentModels_ListModels",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedDocumentModelDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Document Models": {
            "$ref": "./examples/GetDocumentModels.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/documentModels/{modelId}:analyze": {
      "post": {
        "description": "Analyzes document with document model.",
        "operationId": "DocumentModels_AnalyzeDocumentFromStream",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Unique document model name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "pages",
            "in": "query",
            "description": "List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\"",
            "schema": {
              "pattern": "^(\\d+(-\\d+)?)(,\\s*(\\d+(-\\d+)?))*$",
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "locale",
            "in": "query",
            "description": "Locale hint for text recognition and document analysis.  Value may contain only\nthe language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").",
            "schema": {
              "type": "string",
              "x-ms-parameter-location": "method"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "stringIndexType",
            "in": "query",
            "description": "Method used to compute string offset and length.",
            "schema": {
              "type": "string",
              "default": "textElements",
              "enum": [
                "textElements",
                "unicodeCodePoint",
                "utf16CodeUnit"
              ],
              "x-ms-enum": {
                "name": "StringIndexType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "textElements",
                    "value": "textElements",
                    "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
                  },
                  {
                    "name": "unicodeCodePoint",
                    "value": "unicodeCodePoint",
                    "description": "Character unit represented by a single unicode code point.  Used by Python 3."
                  },
                  {
                    "name": "utf16CodeUnit",
                    "value": "utf16CodeUnit",
                    "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
                  }
                ]
              },
              "x-ms-parameter-location": "method"
            },
            "x-ms-enum": {
              "name": "StringIndexType",
              "modelAsString": true,
              "values": [
                {
                  "name": "textElements",
                  "value": "textElements",
                  "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
                },
                {
                  "name": "unicodeCodePoint",
                  "value": "unicodeCodePoint",
                  "description": "Character unit represented by a single unicode code point.  Used by Python 3."
                },
                {
                  "name": "utf16CodeUnit",
                  "value": "utf16CodeUnit",
                  "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
                }
              ]
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "features",
            "in": "query",
            "description": "List of optional analysis features.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ocrHighResolution",
                  "languages",
                  "barcodes",
                  "formulas",
                  "keyValuePairs",
                  "styleFont",
                  "queryFields"
                ],
                "x-ms-enum": {
                  "name": "DocumentAnalysisFeature",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "ocrHighResolution",
                      "value": "ocrHighResolution",
                      "description": "Perform OCR at a higher resolution to handle documents with fine print."
                    },
                    {
                      "name": "languages",
                      "value": "languages",
                      "description": "Enable the detection of the text content language."
                    },
                    {
                      "name": "barcodes",
                      "value": "barcodes",
                      "description": "Enable the detection of barcodes in the document."
                    },
                    {
                      "name": "formulas",
                      "value": "formulas",
                      "description": "Enable the detection of mathematical expressions in the document."
                    },
                    {
                      "name": "keyValuePairs",
                      "value": "keyValuePairs",
                      "description": "Enable the detection of general key value pairs (form fields) in the document."
                    },
                    {
                      "name": "styleFont",
                      "value": "styleFont",
                      "description": "Enable the recognition of various font styles."
                    },
                    {
                      "name": "queryFields",
                      "value": "queryFields",
                      "description": "Enable the extraction of additional fields via the queryFields query parameter."
                    }
                  ]
                }
              },
              "x-ms-parameter-location": "method"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "queryFields",
            "in": "query",
            "description": "List of additional fields to extract.  Ex. \"NumberOfGuests,StoreNumber\"",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-ms-parameter-location": "method"
            },
            "x-ms-parameter-location": "method"
          },
          {
            "name": "outputContentFormat",
            "in": "query",
            "description": "Format of the analyze result top-level content.",
            "schema": {
              "type": "string",
              "default": "text",
              "enum": [
                "text",
                "markdown"
              ],
              "x-ms-enum": {
                "name": "ContentFormat",
                "modelAsString": true,
                "values": [
                  {
                    "name": "text",
                    "value": "text",
                    "description": "Plain text representation of the document content without any formatting."
                  },
                  {
                    "name": "markdown",
                    "value": "markdown",
                    "description": "Markdown representation of the document content with section headings, tables,\netc."
                  }
                ]
              },
              "x-ms-parameter-location": "method"
            },
            "x-ms-enum": {
              "name": "ContentFormat",
              "modelAsString": true,
              "values": [
                {
                  "name": "text",
                  "value": "text",
                  "description": "Plain text representation of the document content without any formatting."
                },
                {
                  "name": "markdown",
                  "value": "markdown",
                  "description": "Markdown representation of the document content with section headings, tables,\netc."
                }
              ]
            },
            "x-ms-parameter-location": "method"
          }
        ],
        "requestBody": {
          "description": "Input content.",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/pdf": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/jpeg": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/png": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/tiff": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/bmp": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "image/heif": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "text/html": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true,
          "x-ms-parameter-location": "method"
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of AnalyzeResultOperation",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Analyze Document from Url": {
            "$ref": "./examples/AnalyzeDocument_Stream.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-codegen-request-body-name": "input"
      }
    },
    "/documentModels/{modelId}": {
      "get": {
        "description": "Gets detailed document model information.",
        "operationId": "DocumentModels_GetModel",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Unique document model name.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModelDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Custom Document Model": {
            "$ref": "./examples/GetDocumentModel_Custom.json"
          },
          "Get Prebuilt Document Model": {
            "$ref": "./examples/GetDocumentModel_Prebuilt.json"
          }
        }
      },
      "delete": {
        "description": "Deletes document model.",
        "operationId": "DocumentModels_DeleteModel",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Unique document model name.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. ",
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Delete Document Model": {
            "$ref": "./examples/DeleteDocumentModel.json"
          }
        }
      }
    },
    "/documentModels/{modelId}:copyTo": {
      "post": {
        "description": "Copies document model to the target resource, region, and modelId.",
        "operationId": "DocumentModels_CopyModelTo",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Unique document model name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Copy to request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyAuthorization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of DocumentModelCopyToOperationDetails",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Copy Document Model To": {
            "$ref": "./examples/CopyDocumentModelTo.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-codegen-request-body-name": "copyToRequest"
      }
    },
    "/documentModels/{modelId}/analyzeResults/{resultId}": {
      "get": {
        "description": "Gets the result of document analysis.",
        "operationId": "DocumentModels_GetAnalyzeResult",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Unique document model name.",
            "required": true,
            "schema": {
              "maxLength": 64,
              "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
              "type": "string"
            }
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Analyze operation result ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalyzeResultOperation"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Analyze Document Result": {
            "$ref": "./examples/GetAnalyzeDocumentResult.json"
          }
        }
      }
    },
    "/documentModels:authorizeCopy": {
      "post": {
        "description": "Generates authorization to copy a document model to this location with\nspecified modelId and optional description.",
        "operationId": "DocumentModels_AuthorizeModelCopy",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "requestBody": {
          "description": "Authorize copy request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeCopyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CopyAuthorization"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Authorize Copy of Document Model": {
            "$ref": "./examples/AuthorizeCopyDocumentModel.json"
          }
        },
        "x-codegen-request-body-name": "authorizeCopyRequest"
      }
    },
    "/documentModels:build": {
      "post": {
        "description": "Builds a custom document analysis model.",
        "operationId": "DocumentModels_BuildModel",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "requestBody": {
          "description": "Build request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildDocumentModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of DocumentModelBuildOperationDetails",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Build Document Model": {
            "$ref": "./examples/BuildDocumentModel.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-codegen-request-body-name": "buildRequest"
      }
    },
    "/documentModels:compose": {
      "post": {
        "description": "Creates a new document model from document types of existing document models.",
        "operationId": "DocumentModels_ComposeModel",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "requestBody": {
          "description": "Compose request parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComposeDocumentModelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "description": "The location of an instance of DocumentModelComposeOperationDetails",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Compose Document Model": {
            "$ref": "./examples/ComposeDocumentModel.json"
          }
        },
        "x-ms-long-running-operation": true,
        "x-codegen-request-body-name": "composeRequest"
      }
    },
    "/info": {
      "get": {
        "description": "Return information about the current resource.",
        "operationId": "MiscellaneousOperations_GetResourceInfo",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Resource Details": {
            "$ref": "./examples/GetResourceDetails.json"
          }
        }
      }
    },
    "/operations": {
      "get": {
        "description": "Lists all operations.",
        "operationId": "MiscellaneousOperations_ListOperations",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedOperationDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Operations": {
            "$ref": "./examples/GetOperations.json"
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/operations/{operationId}": {
      "get": {
        "description": "Gets operation info.",
        "operationId": "MiscellaneousOperations_GetDocumentModelBuildOperation",
        "parameters": [
          {
            "name": "api-version",
            "default": "2023-07-31",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "x-ms-parameter-location": "method",
              "x-ms-client-name": "apiVersion"
            },
            "x-ms-parameter-location": "method",
            "x-ms-client-name": "apiVersion"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModelBuildOperationDetails"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-ms-examples": {
          "Get Operation - Document Model Build": {
            "$ref": "./examples/GetOperation_DocumentModelBuild.json"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressValue": {
        "type": "object",
        "properties": {
          "houseNumber": {
            "type": "string",
            "description": "House or building number."
          },
          "poBox": {
            "type": "string",
            "description": "Post office box number."
          },
          "road": {
            "type": "string",
            "description": "Street name."
          },
          "city": {
            "type": "string",
            "description": "Name of city, town, village, etc."
          },
          "state": {
            "type": "string",
            "description": "First-level administrative division."
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code used for mail sorting."
          },
          "countryRegion": {
            "type": "string",
            "description": "Country/region."
          },
          "streetAddress": {
            "type": "string",
            "description": "Street-level address, excluding city, state, countryRegion, and postalCode."
          },
          "unit": {
            "type": "string",
            "description": "Apartment or office number"
          },
          "cityDistrict": {
            "type": "string",
            "description": "Districts or boroughs within a city, such as Brooklyn in New York City or City\nof Westminster in London."
          },
          "stateDistrict": {
            "type": "string",
            "description": "Second-level administrative division used in certain locales."
          },
          "suburb": {
            "type": "string",
            "description": "Unofficial neighborhood name, like Chinatown."
          },
          "house": {
            "type": "string",
            "description": "Build name, such as World Trade Center."
          },
          "level": {
            "type": "string",
            "description": "Floor number, such as 3F."
          }
        },
        "description": "Address field value."
      },
      "AnalyzeDocumentRequest": {
        "type": "object",
        "properties": {
          "urlSource": {
            "type": "string",
            "description": "Document URL to analyze.  Either urlSource or base64Source must be specified.",
            "format": "uri"
          },
          "base64Source": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoding of the document to analyze.  Either urlSource or base64Source\nmust be specified.",
            "format": "byte"
          }
        },
        "description": "Document analysis parameters."
      },
      "AnalyzeResult": {
        "required": [
          "apiVersion",
          "content",
          "modelId",
          "pages",
          "stringIndexType"
        ],
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "API version used to produce this result."
          },
          "modelId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Document model ID used to produce this result."
          },
          "stringIndexType": {
            "$ref": "#/components/schemas/StringIndexType"
          },
          "contentFormat": {
            "$ref": "#/components/schemas/ContentFormat"
          },
          "content": {
            "type": "string",
            "description": "Concatenate string representation of all textual and visual elements in reading\norder."
          },
          "pages": {
            "type": "array",
            "description": "Analyzed pages.",
            "items": {
              "$ref": "#/components/schemas/DocumentPage"
            },
            "x-ms-identifiers": []
          },
          "paragraphs": {
            "type": "array",
            "description": "Extracted paragraphs.",
            "items": {
              "$ref": "#/components/schemas/DocumentParagraph"
            },
            "x-ms-identifiers": []
          },
          "tables": {
            "type": "array",
            "description": "Extracted tables.",
            "items": {
              "$ref": "#/components/schemas/DocumentTable"
            },
            "x-ms-identifiers": []
          },
          "figures": {
            "type": "array",
            "description": "Extracted figures.",
            "items": {
              "$ref": "#/components/schemas/DocumentFigure"
            },
            "x-ms-identifiers": []
          },
          "lists": {
            "type": "array",
            "description": "Extracted lists.",
            "items": {
              "$ref": "#/components/schemas/DocumentList"
            },
            "x-ms-identifiers": []
          },
          "sections": {
            "type": "array",
            "description": "Extracted sections.",
            "items": {
              "$ref": "#/components/schemas/DocumentSection"
            },
            "x-ms-identifiers": []
          },
          "keyValuePairs": {
            "type": "array",
            "description": "Extracted key-value pairs.",
            "items": {
              "$ref": "#/components/schemas/DocumentKeyValuePair"
            },
            "x-ms-identifiers": []
          },
          "styles": {
            "type": "array",
            "description": "Extracted font styles.",
            "items": {
              "$ref": "#/components/schemas/DocumentStyle"
            },
            "x-ms-identifiers": []
          },
          "languages": {
            "type": "array",
            "description": "Detected languages.",
            "items": {
              "$ref": "#/components/schemas/DocumentLanguage"
            },
            "x-ms-identifiers": []
          },
          "documents": {
            "type": "array",
            "description": "Extracted documents.",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "Document analysis result."
      },
      "AnalyzeResultOperation": {
        "required": [
          "createdDateTime",
          "lastUpdatedDateTime",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/OperationStatus"
          },
          "createdDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the analyze operation was submitted.",
            "format": "date-time"
          },
          "lastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the status was last updated.",
            "format": "date-time"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "analyzeResult": {
            "$ref": "#/components/schemas/AnalyzeResult"
          }
        },
        "description": "Status and result of the analyze operation."
      },
      "AuthorizeCopyRequest": {
        "required": [
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document model name."
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document model description."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of key-value tag attributes associated with the document model."
          }
        },
        "description": "Request body to authorize document model copy."
      },
      "Azure.Core.uuid": {
        "type": "string",
        "description": "Universally Unique Identifier",
        "format": "uuid"
      },
      "AzureBlobContentSource": {
        "required": [
          "containerUrl"
        ],
        "type": "object",
        "properties": {
          "containerUrl": {
            "type": "string",
            "description": "Azure Blob Storage container URL.",
            "format": "uri"
          },
          "prefix": {
            "type": "string",
            "description": "Blob name prefix."
          }
        },
        "description": "Azure Blob Storage content."
      },
      "AzureBlobFileListContentSource": {
        "required": [
          "containerUrl",
          "fileList"
        ],
        "type": "object",
        "properties": {
          "containerUrl": {
            "type": "string",
            "description": "Azure Blob Storage container URL.",
            "format": "uri"
          },
          "fileList": {
            "type": "string",
            "description": "Path to a JSONL file within the container specifying a subset of documents."
          }
        },
        "description": "File list in Azure Blob Storage."
      },
      "BoundingRegion": {
        "required": [
          "pageNumber",
          "polygon"
        ],
        "type": "object",
        "properties": {
          "pageNumber": {
            "minimum": 1,
            "type": "integer",
            "description": "1-based page number of page containing the bounding region.",
            "format": "int32"
          },
          "polygon": {
            "type": "array",
            "description": "Bounding polygon on the page, or the entire page if not specified.\nCoordinates specified relative to the top-left of the page. The numbers\nrepresent the x, y values of the polygon vertices, clockwise from the left\n(-180 degrees inclusive) relative to the element orientation.",
            "items": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "description": "Bounding polygon on a specific page of the input."
      },
      "BuildDocumentClassifierRequest": {
        "required": [
          "classifierId",
          "docTypes"
        ],
        "type": "object",
        "properties": {
          "classifierId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document classifier name."
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document classifier description."
          },
          "docTypes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClassifierDocumentTypeDetails"
            },
            "description": "List of document types to classify against."
          }
        },
        "description": "Request body to build a new custom document classifier."
      },
      "BuildDocumentModelRequest": {
        "required": [
          "buildMode",
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document model name."
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document model description."
          },
          "buildMode": {
            "$ref": "#/components/schemas/DocumentBuildMode"
          },
          "azureBlobSource": {
            "$ref": "#/components/schemas/AzureBlobContentSource"
          },
          "azureBlobFileListSource": {
            "$ref": "#/components/schemas/AzureBlobFileListContentSource"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of key-value tag attributes associated with the document model."
          }
        },
        "description": "Request body to build a new custom document model."
      },
      "ClassifierDocumentTypeDetails": {
        "type": "object",
        "properties": {
          "sourceKind": {
            "$ref": "#/components/schemas/ContentSourceKind"
          },
          "azureBlobSource": {
            "$ref": "#/components/schemas/AzureBlobContentSource"
          },
          "azureBlobFileListSource": {
            "$ref": "#/components/schemas/AzureBlobFileListContentSource"
          }
        },
        "description": "Classifier document type info."
      },
      "ClassifyDocumentRequest": {
        "type": "object",
        "properties": {
          "urlSource": {
            "type": "string",
            "description": "Document URL to classify.  Either urlSource or base64Source must be specified.",
            "format": "uri"
          },
          "base64Source": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "description": "Base64 encoding of the document to classify.  Either urlSource or base64Source\nmust be specified.",
            "format": "byte"
          }
        },
        "description": "Document classification parameters."
      },
      "ComponentDocumentModelDetails": {
        "required": [
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "maxLength": 64,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document model name."
          }
        },
        "description": "A component of a composed document model."
      },
      "ComposeDocumentModelRequest": {
        "required": [
          "componentModels",
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document model name."
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document model description."
          },
          "componentModels": {
            "type": "array",
            "description": "List of component document models to compose.",
            "items": {
              "$ref": "#/components/schemas/ComponentDocumentModelDetails"
            },
            "x-ms-identifiers": []
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of key-value tag attributes associated with the document model."
          }
        },
        "description": "Request body to create a composed document model from component document models."
      },
      "ContentFormat": {
        "type": "string",
        "description": "Format of the content in analyzed result.",
        "enum": [
          "text",
          "markdown"
        ],
        "x-ms-enum": {
          "name": "ContentFormat",
          "modelAsString": true,
          "values": [
            {
              "name": "text",
              "value": "text",
              "description": "Plain text representation of the document content without any formatting."
            },
            {
              "name": "markdown",
              "value": "markdown",
              "description": "Markdown representation of the document content with section headings, tables,\netc."
            }
          ]
        }
      },
      "ContentSourceKind": {
        "type": "string",
        "description": "Type of content source.",
        "enum": [
          "url",
          "base64",
          "azureBlob",
          "azureBlobFileList"
        ],
        "x-ms-enum": {
          "name": "ContentSourceKind",
          "modelAsString": true,
          "values": [
            {
              "name": "url",
              "value": "url",
              "description": "Content at a specific URL."
            },
            {
              "name": "base64",
              "value": "base64",
              "description": "Content represented via Base64 encoding."
            },
            {
              "name": "azureBlob",
              "value": "azureBlob",
              "description": "Files in a path within an Azure Blob Storage container."
            },
            {
              "name": "azureBlobFileList",
              "value": "azureBlobFileList",
              "description": "A file list specifying individual files in an Azure Blob Storage container."
            }
          ]
        }
      },
      "CopyAuthorization": {
        "required": [
          "accessToken",
          "expirationDateTime",
          "targetModelId",
          "targetModelLocation",
          "targetResourceId",
          "targetResourceRegion"
        ],
        "type": "object",
        "properties": {
          "targetResourceId": {
            "type": "string",
            "description": "ID of the target Azure resource where the document model should be copied to.",
            "x-ms-azure-resource": true
          },
          "targetResourceRegion": {
            "type": "string",
            "description": "Location of the target Azure resource where the document model should be copied\nto."
          },
          "targetModelId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Identifier of the target document model."
          },
          "targetModelLocation": {
            "type": "string",
            "description": "URL of the copied document model in the target account.",
            "format": "uri"
          },
          "accessToken": {
            "type": "string",
            "description": "Token used to authorize the request."
          },
          "expirationDateTime": {
            "type": "string",
            "description": "Date/time when the access token expires.",
            "format": "date-time"
          }
        },
        "description": "Authorization to copy a document model to the specified target resource and\nmodelId."
      },
      "CurrencyValue": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Currency amount.",
            "format": "double"
          },
          "currencySymbol": {
            "type": "string",
            "description": "Currency symbol label, if any."
          },
          "currencyCode": {
            "type": "string",
            "description": "Resolved currency code (ISO 4217), if any."
          }
        },
        "description": "Currency field value."
      },
      "CustomDocumentModelsDetails": {
        "required": [
          "count",
          "limit"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of custom document models in the current resource.",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of custom document models supported in the current resource.",
            "format": "int32"
          }
        },
        "description": "Details regarding custom document models."
      },
      "Document": {
        "required": [
          "confidence",
          "docType",
          "spans"
        ],
        "type": "object",
        "properties": {
          "docType": {
            "maxLength": 64,
            "minLength": 2,
            "type": "string",
            "description": "Document type."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the document.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the document in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentField"
            },
            "description": "Dictionary of named field values."
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the document.",
            "format": "float"
          }
        },
        "description": "An object describing the location and semantic content of a document."
      },
      "DocumentAnalysisFeature": {
        "type": "string",
        "description": "Document analysis features to enable.",
        "enum": [
          "ocrHighResolution",
          "languages",
          "barcodes",
          "formulas",
          "keyValuePairs",
          "styleFont",
          "queryFields"
        ],
        "x-ms-enum": {
          "name": "DocumentAnalysisFeature",
          "modelAsString": true,
          "values": [
            {
              "name": "ocrHighResolution",
              "value": "ocrHighResolution",
              "description": "Perform OCR at a higher resolution to handle documents with fine print."
            },
            {
              "name": "languages",
              "value": "languages",
              "description": "Enable the detection of the text content language."
            },
            {
              "name": "barcodes",
              "value": "barcodes",
              "description": "Enable the detection of barcodes in the document."
            },
            {
              "name": "formulas",
              "value": "formulas",
              "description": "Enable the detection of mathematical expressions in the document."
            },
            {
              "name": "keyValuePairs",
              "value": "keyValuePairs",
              "description": "Enable the detection of general key value pairs (form fields) in the document."
            },
            {
              "name": "styleFont",
              "value": "styleFont",
              "description": "Enable the recognition of various font styles."
            },
            {
              "name": "queryFields",
              "value": "queryFields",
              "description": "Enable the extraction of additional fields via the queryFields query parameter."
            }
          ]
        }
      },
      "DocumentBarcode": {
        "required": [
          "confidence",
          "kind",
          "span",
          "value"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/DocumentBarcodeKind"
          },
          "value": {
            "type": "string",
            "description": "Barcode value."
          },
          "polygon": {
            "type": "array",
            "description": "Bounding polygon of the barcode, with coordinates specified relative to the\ntop-left of the page. The numbers represent the x, y values of the polygon\nvertices, clockwise from the left (-180 degrees inclusive) relative to the\nelement orientation.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "span": {
            "$ref": "#/components/schemas/DocumentSpan"
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the barcode.",
            "format": "float"
          }
        },
        "description": "A barcode object."
      },
      "DocumentBarcodeKind": {
        "type": "string",
        "description": "Barcode kind.",
        "enum": [
          "QRCode",
          "PDF417",
          "UPCA",
          "UPCE",
          "Code39",
          "Code128",
          "EAN8",
          "EAN13",
          "DataBar",
          "Code93",
          "Codabar",
          "DataBarExpanded",
          "ITF",
          "MicroQRCode",
          "Aztec",
          "DataMatrix",
          "MaxiCode"
        ],
        "x-ms-enum": {
          "name": "DocumentBarcodeKind",
          "modelAsString": true,
          "values": [
            {
              "name": "QRCode",
              "value": "QRCode",
              "description": "QR code, as defined in ISO/IEC 18004:2015."
            },
            {
              "name": "PDF417",
              "value": "PDF417",
              "description": "PDF417, as defined in ISO 15438."
            },
            {
              "name": "UPCA",
              "value": "UPCA",
              "description": "GS1 12-digit Universal Product Code."
            },
            {
              "name": "UPCE",
              "value": "UPCE",
              "description": "GS1 6-digit Universal Product Code."
            },
            {
              "name": "Code39",
              "value": "Code39",
              "description": "Code 39 barcode, as defined in ISO/IEC 16388:2007."
            },
            {
              "name": "Code128",
              "value": "Code128",
              "description": "Code 128 barcode, as defined in ISO/IEC 15417:2007."
            },
            {
              "name": "EAN8",
              "value": "EAN8",
              "description": "GS1 8-digit International Article Number (European Article Number)."
            },
            {
              "name": "EAN13",
              "value": "EAN13",
              "description": "GS1 13-digit International Article Number (European Article Number)."
            },
            {
              "name": "DataBar",
              "value": "DataBar",
              "description": "GS1 DataBar barcode."
            },
            {
              "name": "Code93",
              "value": "Code93",
              "description": "Code 93 barcode, as defined in ANSI/AIM BC5-1995."
            },
            {
              "name": "Codabar",
              "value": "Codabar",
              "description": "Codabar barcode, as defined in ANSI/AIM BC3-1995."
            },
            {
              "name": "DataBarExpanded",
              "value": "DataBarExpanded",
              "description": "GS1 DataBar Expanded barcode."
            },
            {
              "name": "ITF",
              "value": "ITF",
              "description": "Interleaved 2 of 5 barcode, as defined in ANSI/AIM BC2-1995."
            },
            {
              "name": "MicroQRCode",
              "value": "MicroQRCode",
              "description": "Micro QR code, as defined in ISO/IEC 23941:2022."
            },
            {
              "name": "Aztec",
              "value": "Aztec",
              "description": "Aztec code, as defined in ISO/IEC 24778:2008."
            },
            {
              "name": "DataMatrix",
              "value": "DataMatrix",
              "description": "Data matrix code, as defined in ISO/IEC 16022:2006."
            },
            {
              "name": "MaxiCode",
              "value": "MaxiCode",
              "description": "MaxiCode, as defined in ISO/IEC 16023:2000."
            }
          ]
        }
      },
      "DocumentBuildMode": {
        "type": "string",
        "description": "Custom document model build mode.",
        "enum": [
          "template",
          "neural"
        ],
        "x-ms-enum": {
          "name": "DocumentBuildMode",
          "modelAsString": true,
          "values": [
            {
              "name": "template",
              "value": "template",
              "description": "Target documents with similar visual templates."
            },
            {
              "name": "neural",
              "value": "neural",
              "description": "Support documents with diverse visual templates."
            }
          ]
        }
      },
      "DocumentCaption": {
        "required": [
          "content",
          "spans"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the caption."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the caption.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the caption in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "elements": {
            "type": "array",
            "description": "Child elements of the caption.",
            "items": {
              "$ref": "#/components/schemas/DocumentElement"
            }
          }
        },
        "description": "A caption object describing a table or figure."
      },
      "DocumentClassifierBuildOperationDetails": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DocumentClassifierDetails"
          }
        },
        "description": "Get Operation response object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationDetails"
          }
        ],
        "x-ms-discriminator-value": "documentClassifierBuild"
      },
      "DocumentClassifierDetails": {
        "required": [
          "apiVersion",
          "classifierId",
          "createdDateTime",
          "docTypes"
        ],
        "type": "object",
        "properties": {
          "classifierId": {
            "maxLength": 64,
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document classifier name.",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document classifier description."
          },
          "createdDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the document classifier was created.",
            "format": "date-time"
          },
          "expirationDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the document classifier will expire.",
            "format": "date-time"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version used to create this document classifier."
          },
          "docTypes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClassifierDocumentTypeDetails"
            },
            "description": "List of document types to classify against."
          }
        },
        "description": "Document classifier info."
      },
      "DocumentElement": {
        "type": "string",
        "description": "An JSON pointer referencing an element of the document, such as paragraph,\ntable, section, etc."
      },
      "DocumentField": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DocumentFieldType"
          },
          "valueString": {
            "type": "string",
            "description": "String value."
          },
          "valueDate": {
            "type": "string",
            "description": "Date value in YYYY-MM-DD format (ISO 8601).",
            "format": "date"
          },
          "valueTime": {
            "type": "string",
            "description": "Time value in hh:mm:ss format (ISO 8601).",
            "format": "time"
          },
          "valuePhoneNumber": {
            "type": "string",
            "description": "Phone number value in E.164 format (ex. +19876543210)."
          },
          "valueNumber": {
            "type": "number",
            "description": "Floating point value.",
            "format": "double"
          },
          "valueInteger": {
            "type": "integer",
            "description": "Integer value.",
            "format": "int64"
          },
          "valueSelectionMark": {
            "$ref": "#/components/schemas/DocumentSelectionMarkState"
          },
          "valueSignature": {
            "$ref": "#/components/schemas/DocumentSignatureType"
          },
          "valueCountryRegion": {
            "type": "string",
            "description": "3-letter country code value (ISO 3166-1 alpha-3)."
          },
          "valueArray": {
            "type": "array",
            "description": "Array of field values.",
            "items": {
              "$ref": "#/components/schemas/DocumentField"
            },
            "x-ms-identifiers": []
          },
          "valueObject": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentField"
            },
            "description": "Dictionary of named field values."
          },
          "valueCurrency": {
            "$ref": "#/components/schemas/CurrencyValue"
          },
          "valueAddress": {
            "$ref": "#/components/schemas/AddressValue"
          },
          "valueBoolean": {
            "type": "boolean",
            "description": "Boolean value."
          },
          "content": {
            "type": "string",
            "description": "Field content."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the field.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the field in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the field.",
            "format": "float"
          }
        },
        "description": "An object representing the content and location of a field value."
      },
      "DocumentFieldSchema": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DocumentFieldType"
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Field description."
          },
          "example": {
            "type": "string",
            "description": "Example field content."
          },
          "items": {
            "$ref": "#/components/schemas/DocumentFieldSchema"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentFieldSchema"
            },
            "description": "Named sub-fields of the object field."
          }
        },
        "description": "Description of the field semantic schema using a JSON Schema style syntax."
      },
      "DocumentFieldType": {
        "type": "string",
        "description": "Semantic data type of the field value.",
        "enum": [
          "string",
          "date",
          "time",
          "phoneNumber",
          "number",
          "integer",
          "selectionMark",
          "countryRegion",
          "signature",
          "array",
          "object",
          "currency",
          "address",
          "boolean"
        ],
        "x-ms-enum": {
          "name": "DocumentFieldType",
          "modelAsString": true,
          "values": [
            {
              "name": "string",
              "value": "string",
              "description": "Plain text."
            },
            {
              "name": "date",
              "value": "date",
              "description": "Date, normalized to ISO 8601 (YYYY-MM-DD) format."
            },
            {
              "name": "time",
              "value": "time",
              "description": "Time, normalized to ISO 8601 (hh:mm:ss) format."
            },
            {
              "name": "phoneNumber",
              "value": "phoneNumber",
              "description": "Phone number, normalized to E.164 (+{CountryCode}{SubscriberNumber}) format."
            },
            {
              "name": "number",
              "value": "number",
              "description": "Floating point number, normalized to double precision floating point."
            },
            {
              "name": "integer",
              "value": "integer",
              "description": "Integer number, normalized to 64-bit signed integer."
            },
            {
              "name": "selectionMark",
              "value": "selectionMark",
              "description": "Is field selected?"
            },
            {
              "name": "countryRegion",
              "value": "countryRegion",
              "description": "Country/region, normalized to ISO 3166-1 alpha-3 format (ex. USA)."
            },
            {
              "name": "signature",
              "value": "signature",
              "description": "Is signature present?"
            },
            {
              "name": "array",
              "value": "array",
              "description": "List of subfields of the same type."
            },
            {
              "name": "object",
              "value": "object",
              "description": "Named list of subfields of potentially different types."
            },
            {
              "name": "currency",
              "value": "currency",
              "description": "Currency amount with optional currency symbol and unit."
            },
            {
              "name": "address",
              "value": "address",
              "description": "Parsed address."
            },
            {
              "name": "boolean",
              "value": "boolean",
              "description": "Boolean value, normalized to true or false."
            }
          ]
        }
      },
      "DocumentFigure": {
        "required": [
          "spans"
        ],
        "type": "object",
        "properties": {
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the figure.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the figure in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "elements": {
            "type": "array",
            "description": "Child elements of the figure, excluding any caption or footnotes.",
            "items": {
              "$ref": "#/components/schemas/DocumentElement"
            }
          },
          "caption": {
            "$ref": "#/components/schemas/DocumentCaption"
          },
          "footnotes": {
            "type": "array",
            "description": "List of footnotes associated with the figure.",
            "items": {
              "$ref": "#/components/schemas/DocumentFootnote"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "An object representing a figure in the document."
      },
      "DocumentFootnote": {
        "required": [
          "content",
          "spans"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content of the footnote."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the footnote.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the footnote in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "elements": {
            "type": "array",
            "description": "Child elements of the footnote.",
            "items": {
              "$ref": "#/components/schemas/DocumentElement"
            }
          }
        },
        "description": "A footnote object describing a table or figure."
      },
      "DocumentFormula": {
        "required": [
          "confidence",
          "kind",
          "span",
          "value"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "$ref": "#/components/schemas/DocumentFormulaKind"
          },
          "value": {
            "type": "string",
            "description": "LaTex expression describing the formula."
          },
          "polygon": {
            "type": "array",
            "description": "Bounding polygon of the formula, with coordinates specified relative to the\ntop-left of the page. The numbers represent the x, y values of the polygon\nvertices, clockwise from the left (-180 degrees inclusive) relative to the\nelement orientation.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "span": {
            "$ref": "#/components/schemas/DocumentSpan"
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the formula.",
            "format": "float"
          }
        },
        "description": "A formula object."
      },
      "DocumentFormulaKind": {
        "type": "string",
        "description": "Formula kind.",
        "enum": [
          "inline",
          "display"
        ],
        "x-ms-enum": {
          "name": "DocumentFormulaKind",
          "modelAsString": true,
          "values": [
            {
              "name": "inline",
              "value": "inline",
              "description": "A formula embedded within the content of a paragraph."
            },
            {
              "name": "display",
              "value": "display",
              "description": "A formula in display mode that takes up an entire line."
            }
          ]
        }
      },
      "DocumentKeyValueElement": {
        "required": [
          "content",
          "spans"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Concatenated content of the key-value element in reading order."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the key-value element.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the key-value element in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "An object representing the field key or value in a key-value pair."
      },
      "DocumentKeyValuePair": {
        "required": [
          "confidence",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/DocumentKeyValueElement"
          },
          "value": {
            "$ref": "#/components/schemas/DocumentKeyValueElement"
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the key-value pair.",
            "format": "float"
          }
        },
        "description": "An object representing a form field with distinct field label (key) and field\nvalue (may be empty)."
      },
      "DocumentLanguage": {
        "required": [
          "confidence",
          "locale",
          "spans"
        ],
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "Detected language.  Value may an ISO 639-1 language code (ex. \"en\", \"fr\")\nor BCP 47 language tag (ex. \"zh-Hans\")."
          },
          "spans": {
            "type": "array",
            "description": "Location of the text elements in the concatenated content the language applies\nto.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly identifying the language.",
            "format": "float"
          }
        },
        "description": "An object representing the detected language for a given text span."
      },
      "DocumentLine": {
        "required": [
          "content",
          "spans"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Concatenated content of the contained elements in reading order."
          },
          "polygon": {
            "type": "array",
            "description": "Bounding polygon of the line, with coordinates specified relative to the\ntop-left of the page. The numbers represent the x, y values of the polygon\nvertices, clockwise from the left (-180 degrees inclusive) relative to the\nelement orientation.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "spans": {
            "type": "array",
            "description": "Location of the line in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "A content line object consisting of an adjacent sequence of content elements,\nsuch as words and selection marks."
      },
      "DocumentList": {
        "required": [
          "items",
          "spans"
        ],
        "type": "object",
        "properties": {
          "spans": {
            "type": "array",
            "description": "Location of the list in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "items": {
            "type": "array",
            "description": "Items in the list.",
            "items": {
              "$ref": "#/components/schemas/DocumentListItem"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "An object representing a list in the document."
      },
      "DocumentListItem": {
        "required": [
          "content",
          "level",
          "spans"
        ],
        "type": "object",
        "properties": {
          "level": {
            "minimum": 1,
            "type": "integer",
            "description": "Level of the list item (1-indexed).",
            "format": "int32"
          },
          "content": {
            "type": "string",
            "description": "Content of the list item."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the list item.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the list item in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "elements": {
            "type": "array",
            "description": "Child elements of the list item.",
            "items": {
              "$ref": "#/components/schemas/DocumentElement"
            }
          }
        },
        "description": "An object representing a list item in the document."
      },
      "DocumentModelBuildOperationDetails": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DocumentModelDetails"
          }
        },
        "description": "Get Operation response object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationDetails"
          }
        ],
        "x-ms-discriminator-value": "documentModelBuild"
      },
      "DocumentModelComposeOperationDetails": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DocumentModelDetails"
          }
        },
        "description": "Get Operation response object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationDetails"
          }
        ],
        "x-ms-discriminator-value": "documentModelCompose"
      },
      "DocumentModelCopyToOperationDetails": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DocumentModelDetails"
          }
        },
        "description": "Get Operation response object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OperationDetails"
          }
        ],
        "x-ms-discriminator-value": "documentModelCopyTo"
      },
      "DocumentModelDetails": {
        "required": [
          "createdDateTime",
          "modelId"
        ],
        "type": "object",
        "properties": {
          "modelId": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
            "type": "string",
            "description": "Unique document model name.",
            "x-ms-mutability": [
              "read",
              "create"
            ]
          },
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document model description."
          },
          "createdDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the document model was created.",
            "format": "date-time"
          },
          "expirationDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the document model will expire.",
            "format": "date-time"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version used to create this document model."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of key-value tag attributes associated with the document model."
          },
          "buildMode": {
            "$ref": "#/components/schemas/DocumentBuildMode"
          },
          "azureBlobSource": {
            "$ref": "#/components/schemas/AzureBlobContentSource"
          },
          "azureBlobFileListSource": {
            "$ref": "#/components/schemas/AzureBlobFileListContentSource"
          },
          "docTypes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentTypeDetails"
            },
            "description": "Supported document types."
          }
        },
        "description": "Document model info."
      },
      "DocumentPage": {
        "required": [
          "pageNumber",
          "spans"
        ],
        "type": "object",
        "properties": {
          "pageNumber": {
            "minimum": 1,
            "type": "integer",
            "description": "1-based page number in the input document.",
            "format": "int32"
          },
          "angle": {
            "maximum": 180,
            "type": "number",
            "description": "The general orientation of the content in clockwise direction, measured in\ndegrees between (-180, 180].",
            "format": "float"
          },
          "width": {
            "minimum": 0,
            "type": "number",
            "description": "The width of the image/PDF in pixels/inches, respectively.",
            "format": "float"
          },
          "height": {
            "minimum": 0,
            "type": "number",
            "description": "The height of the image/PDF in pixels/inches, respectively.",
            "format": "float"
          },
          "unit": {
            "$ref": "#/components/schemas/LengthUnit"
          },
          "spans": {
            "type": "array",
            "description": "Location of the page in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "words": {
            "type": "array",
            "description": "Extracted words from the page.",
            "items": {
              "$ref": "#/components/schemas/DocumentWord"
            },
            "x-ms-identifiers": []
          },
          "selectionMarks": {
            "type": "array",
            "description": "Extracted selection marks from the page.",
            "items": {
              "$ref": "#/components/schemas/DocumentSelectionMark"
            },
            "x-ms-identifiers": []
          },
          "lines": {
            "type": "array",
            "description": "Extracted lines from the page, potentially containing both textual and visual\nelements.",
            "items": {
              "$ref": "#/components/schemas/DocumentLine"
            },
            "x-ms-identifiers": []
          },
          "barcodes": {
            "type": "array",
            "description": "Extracted barcodes from the page.",
            "items": {
              "$ref": "#/components/schemas/DocumentBarcode"
            },
            "x-ms-identifiers": []
          },
          "formulas": {
            "type": "array",
            "description": "Extracted formulas from the page.",
            "items": {
              "$ref": "#/components/schemas/DocumentFormula"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "Content and layout elements extracted from a page from the input."
      },
      "DocumentParagraph": {
        "required": [
          "content",
          "spans"
        ],
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/components/schemas/ParagraphRole"
          },
          "content": {
            "type": "string",
            "description": "Concatenated content of the paragraph in reading order."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the paragraph.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the paragraph in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "A paragraph object consisting with contiguous lines generally with common\nalignment and spacing."
      },
      "DocumentSection": {
        "required": [
          "spans"
        ],
        "type": "object",
        "properties": {
          "spans": {
            "type": "array",
            "description": "Location of the section in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "elements": {
            "type": "array",
            "description": "Child elements of the section.",
            "items": {
              "$ref": "#/components/schemas/DocumentElement"
            }
          }
        },
        "description": "An object representing a section in the document."
      },
      "DocumentSelectionMark": {
        "required": [
          "confidence",
          "span",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/DocumentSelectionMarkState"
          },
          "polygon": {
            "type": "array",
            "description": "Bounding polygon of the selection mark, with coordinates specified relative\nto the top-left of the page. The numbers represent the x, y values of the\npolygon vertices, clockwise from the left (-180 degrees inclusive) relative\nto the element orientation.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "span": {
            "$ref": "#/components/schemas/DocumentSpan"
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the selection mark.",
            "format": "float"
          }
        },
        "description": "A selection mark object representing check boxes, radio buttons, and other\nelements indicating a selection."
      },
      "DocumentSelectionMarkState": {
        "type": "string",
        "description": "State of the selection mark.",
        "enum": [
          "selected",
          "unselected"
        ],
        "x-ms-enum": {
          "name": "DocumentSelectionMarkState",
          "modelAsString": true,
          "values": [
            {
              "name": "selected",
              "value": "selected",
              "description": "The selection mark is selected, often indicated by a check ✓ or cross X inside\nthe selection mark."
            },
            {
              "name": "unselected",
              "value": "unselected",
              "description": "The selection mark is not selected."
            }
          ]
        }
      },
      "DocumentSignatureType": {
        "type": "string",
        "description": "Presence of signature.",
        "enum": [
          "signed",
          "unsigned"
        ],
        "x-ms-enum": {
          "name": "DocumentSignatureType",
          "modelAsString": true,
          "values": [
            {
              "name": "signed",
              "value": "signed",
              "description": "A signature is detected."
            },
            {
              "name": "unsigned",
              "value": "unsigned",
              "description": "No signatures are detected."
            }
          ]
        }
      },
      "DocumentSpan": {
        "required": [
          "length",
          "offset"
        ],
        "type": "object",
        "properties": {
          "offset": {
            "minimum": 0,
            "type": "integer",
            "description": "Zero-based index of the content represented by the span.",
            "format": "int32"
          },
          "length": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of characters in the content represented by the span.",
            "format": "int32"
          }
        },
        "description": "Contiguous region of the concatenated content property, specified as an offset\nand length."
      },
      "DocumentStyle": {
        "required": [
          "confidence",
          "spans"
        ],
        "type": "object",
        "properties": {
          "isHandwritten": {
            "type": "boolean",
            "description": "Is content handwritten?"
          },
          "similarFontFamily": {
            "type": "string",
            "description": "Visually most similar font from among the set of supported font families, with\nfallback fonts following CSS convention (ex. 'Arial, sans-serif')."
          },
          "fontStyle": {
            "$ref": "#/components/schemas/FontStyle"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "color": {
            "pattern": "^#[0-9a-f]{6}$",
            "type": "string",
            "description": "Foreground color in #rrggbb hexadecimal format."
          },
          "backgroundColor": {
            "pattern": "^#[0-9a-f]{6}$",
            "type": "string",
            "description": "Background color in #rrggbb hexadecimal format.."
          },
          "spans": {
            "type": "array",
            "description": "Location of the text elements in the concatenated content the style applies to.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly identifying the style.",
            "format": "float"
          }
        },
        "description": "An object representing observed text styles."
      },
      "DocumentTable": {
        "required": [
          "cells",
          "columnCount",
          "rowCount",
          "spans"
        ],
        "type": "object",
        "properties": {
          "rowCount": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of rows in the table.",
            "format": "int32"
          },
          "columnCount": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of columns in the table.",
            "format": "int32"
          },
          "cells": {
            "type": "array",
            "description": "Cells contained within the table.",
            "items": {
              "$ref": "#/components/schemas/DocumentTableCell"
            },
            "x-ms-identifiers": []
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the table.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the table in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "caption": {
            "$ref": "#/components/schemas/DocumentCaption"
          },
          "footnotes": {
            "type": "array",
            "description": "List of footnotes associated with the table.",
            "items": {
              "$ref": "#/components/schemas/DocumentFootnote"
            },
            "x-ms-identifiers": []
          }
        },
        "description": "A table object consisting table cells arranged in a rectangular layout."
      },
      "DocumentTableCell": {
        "required": [
          "columnIndex",
          "content",
          "rowIndex",
          "spans"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Table cell kind.",
            "default": "content",
            "enum": [
              "content",
              "rowHeader",
              "columnHeader",
              "stubHead",
              "description"
            ],
            "x-ms-enum": {
              "name": "DocumentTableCellKind",
              "modelAsString": true,
              "values": [
                {
                  "name": "content",
                  "value": "content",
                  "description": "Contains the main content/data."
                },
                {
                  "name": "rowHeader",
                  "value": "rowHeader",
                  "description": "Describes the content of the row."
                },
                {
                  "name": "columnHeader",
                  "value": "columnHeader",
                  "description": "Describes the content of the column."
                },
                {
                  "name": "stubHead",
                  "value": "stubHead",
                  "description": "Describes the row headers, usually located at the top left corner of a table."
                },
                {
                  "name": "description",
                  "value": "description",
                  "description": "Describes the content in (parts of) the table."
                }
              ]
            }
          },
          "rowIndex": {
            "type": "integer",
            "description": "Row index of the cell.",
            "format": "int32"
          },
          "columnIndex": {
            "type": "integer",
            "description": "Column index of the cell.",
            "format": "int32"
          },
          "rowSpan": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of rows spanned by this cell.",
            "format": "int32",
            "default": 1
          },
          "columnSpan": {
            "minimum": 1,
            "type": "integer",
            "description": "Number of columns spanned by this cell.",
            "format": "int32",
            "default": 1
          },
          "content": {
            "type": "string",
            "description": "Concatenated content of the table cell in reading order."
          },
          "boundingRegions": {
            "type": "array",
            "description": "Bounding regions covering the table cell.",
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "x-ms-identifiers": []
          },
          "spans": {
            "type": "array",
            "description": "Location of the table cell in the reading order concatenated content.",
            "items": {
              "$ref": "#/components/schemas/DocumentSpan"
            },
            "x-ms-identifiers": []
          },
          "elements": {
            "type": "array",
            "description": "Child elements of the table cell.",
            "items": {
              "$ref": "#/components/schemas/DocumentElement"
            }
          }
        },
        "description": "An object representing the location and content of a table cell."
      },
      "DocumentTableCellKind": {
        "type": "string",
        "description": "Table cell kind.",
        "enum": [
          "content",
          "rowHeader",
          "columnHeader",
          "stubHead",
          "description"
        ],
        "x-ms-enum": {
          "name": "DocumentTableCellKind",
          "modelAsString": true,
          "values": [
            {
              "name": "content",
              "value": "content",
              "description": "Contains the main content/data."
            },
            {
              "name": "rowHeader",
              "value": "rowHeader",
              "description": "Describes the content of the row."
            },
            {
              "name": "columnHeader",
              "value": "columnHeader",
              "description": "Describes the content of the column."
            },
            {
              "name": "stubHead",
              "value": "stubHead",
              "description": "Describes the row headers, usually located at the top left corner of a table."
            },
            {
              "name": "description",
              "value": "description",
              "description": "Describes the content in (parts of) the table."
            }
          ]
        }
      },
      "DocumentTypeDetails": {
        "required": [
          "fieldSchema"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 4096,
            "type": "string",
            "description": "Document model description."
          },
          "buildMode": {
            "$ref": "#/components/schemas/DocumentBuildMode"
          },
          "fieldSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentFieldSchema"
            },
            "description": "Description of the document semantic schema using a JSON Schema style syntax."
          },
          "fieldConfidence": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "float"
            },
            "description": "Estimated confidence for each field."
          }
        },
        "description": "Document type info."
      },
      "DocumentWord": {
        "required": [
          "confidence",
          "content",
          "span"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Text content of the word."
          },
          "polygon": {
            "type": "array",
            "description": "Bounding polygon of the word, with coordinates specified relative to the\ntop-left of the page. The numbers represent the x, y values of the polygon\nvertices, clockwise from the left (-180 degrees inclusive) relative to the\nelement orientation.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "span": {
            "$ref": "#/components/schemas/DocumentSpan"
          },
          "confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "Confidence of correctly extracting the word.",
            "format": "float"
          }
        },
        "description": "A word object consisting of a contiguous sequence of characters.  For non-space\ndelimited languages, such as Chinese, Japanese, and Korean, each character is\nrepresented as its own word."
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error."
          },
          "target": {
            "type": "string",
            "description": "The target of the error."
          },
          "details": {
            "type": "array",
            "description": "An array of details about specific errors that led to this reported error.",
            "items": {
              "$ref": "#/components/schemas/Error"
            },
            "x-ms-identifiers": []
          },
          "innererror": {
            "$ref": "#/components/schemas/InnerError"
          }
        },
        "description": "The error object."
      },
      "ErrorResponse": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        },
        "description": "Error response object."
      },
      "FontStyle": {
        "type": "string",
        "description": "Font style.",
        "enum": [
          "normal",
          "italic"
        ],
        "x-ms-enum": {
          "name": "FontStyle",
          "modelAsString": true,
          "values": [
            {
              "name": "normal",
              "value": "normal",
              "description": "Characters are represented normally."
            },
            {
              "name": "italic",
              "value": "italic",
              "description": "Characters are visually slanted to the right."
            }
          ]
        }
      },
      "FontWeight": {
        "type": "string",
        "description": "Font weight.",
        "enum": [
          "normal",
          "bold"
        ],
        "x-ms-enum": {
          "name": "FontWeight",
          "modelAsString": true,
          "values": [
            {
              "name": "normal",
              "value": "normal",
              "description": "Characters are represented normally."
            },
            {
              "name": "bold",
              "value": "bold",
              "description": "Characters are represented with thicker strokes."
            }
          ]
        }
      },
      "InnerError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "One of a server-defined set of error codes."
          },
          "message": {
            "type": "string",
            "description": "A human-readable representation of the error."
          },
          "innererror": {
            "$ref": "#/components/schemas/InnerError"
          }
        },
        "description": "An object containing more specific information about the error."
      },
      "LengthUnit": {
        "type": "string",
        "description": "The unit used by the width, height, and polygon properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".",
        "enum": [
          "pixel",
          "inch"
        ],
        "x-ms-enum": {
          "name": "LengthUnit",
          "modelAsString": true,
          "values": [
            {
              "name": "pixel",
              "value": "pixel",
              "description": "Length unit for image files."
            },
            {
              "name": "inch",
              "value": "inch",
              "description": "Length unit for PDF files."
            }
          ]
        }
      },
      "OperationDetails": {
        "required": [
          "createdDateTime",
          "kind",
          "lastUpdatedDateTime",
          "operationId",
          "resourceLocation",
          "status"
        ],
        "type": "object",
        "properties": {
          "operationId": {
            "$ref": "#/components/schemas/Azure.Core.uuid"
          },
          "status": {
            "$ref": "#/components/schemas/OperationStatus"
          },
          "percentCompleted": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Operation progress (0-100).",
            "format": "int32"
          },
          "createdDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the operation was created.",
            "format": "date-time"
          },
          "lastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time (UTC) when the status was last updated.",
            "format": "date-time"
          },
          "kind": {
            "$ref": "#/components/schemas/OperationKind"
          },
          "resourceLocation": {
            "type": "string",
            "description": "URL of the resource targeted by this operation.",
            "format": "uri"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version used to create this operation."
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of key-value tag attributes associated with the document model."
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        },
        "description": "Operation info.",
        "discriminator": {
          "propertyName": "kind"
        }
      },
      "OperationKind": {
        "type": "string",
        "description": "Type of operation.",
        "enum": [
          "documentModelBuild",
          "documentModelCompose",
          "documentModelCopyTo",
          "documentClassifierBuild"
        ],
        "x-ms-enum": {
          "name": "OperationKind",
          "modelAsString": true,
          "values": [
            {
              "name": "documentModelBuild",
              "value": "documentModelBuild",
              "description": "Build a new custom document model."
            },
            {
              "name": "documentModelCompose",
              "value": "documentModelCompose",
              "description": "Compose a new custom document model from existing models."
            },
            {
              "name": "documentModelCopyTo",
              "value": "documentModelCopyTo",
              "description": "Copy an existing document model to potentially a different resource, region, or\nsubscription."
            },
            {
              "name": "documentClassifierBuild",
              "value": "documentClassifierBuild",
              "description": "Build a new custom classifier model."
            }
          ]
        }
      },
      "OperationStatus": {
        "type": "string",
        "description": "Operation status.",
        "enum": [
          "notStarted",
          "running",
          "failed",
          "succeeded",
          "canceled"
        ],
        "x-ms-enum": {
          "name": "OperationStatus",
          "modelAsString": true,
          "values": [
            {
              "name": "notStarted",
              "value": "notStarted",
              "description": "The operation has not started yet."
            },
            {
              "name": "running",
              "value": "running",
              "description": "The operation is in progress."
            },
            {
              "name": "failed",
              "value": "failed",
              "description": "The operation has failed."
            },
            {
              "name": "succeeded",
              "value": "succeeded",
              "description": "The operation has succeeded."
            },
            {
              "name": "canceled",
              "value": "canceled",
              "description": "The operation has been canceled."
            }
          ]
        }
      },
      "PagedDocumentClassifierDetails": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "The DocumentClassifierDetails items on this page",
            "items": {
              "$ref": "#/components/schemas/DocumentClassifierDetails"
            },
            "x-ms-identifiers": []
          },
          "nextLink": {
            "type": "string",
            "description": "The link to the next page of items",
            "format": "uri",
            "readOnly": true
          }
        },
        "description": "Paged collection of DocumentClassifierDetails items"
      },
      "PagedDocumentModelDetails": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "The DocumentModelDetails items on this page",
            "items": {
              "$ref": "#/components/schemas/DocumentModelDetails"
            },
            "x-ms-identifiers": []
          },
          "nextLink": {
            "type": "string",
            "description": "The link to the next page of items",
            "format": "uri",
            "readOnly": true
          }
        },
        "description": "Paged collection of DocumentModelDetails items"
      },
      "PagedOperationDetails": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "description": "The OperationDetails items on this page",
            "items": {
              "$ref": "#/components/schemas/OperationDetails"
            },
            "x-ms-identifiers": []
          },
          "nextLink": {
            "type": "string",
            "description": "The link to the next page of items",
            "format": "uri",
            "readOnly": true
          }
        },
        "description": "Paged collection of OperationDetails items"
      },
      "ParagraphRole": {
        "type": "string",
        "description": "Semantic role of the paragraph.",
        "enum": [
          "pageHeader",
          "pageFooter",
          "pageNumber",
          "title",
          "sectionHeading",
          "footnote",
          "formulaBlock"
        ],
        "x-ms-enum": {
          "name": "ParagraphRole",
          "modelAsString": true,
          "values": [
            {
              "name": "pageHeader",
              "value": "pageHeader",
              "description": "Text near the top edge of the page."
            },
            {
              "name": "pageFooter",
              "value": "pageFooter",
              "description": "Text near the bottom edge of the page."
            },
            {
              "name": "pageNumber",
              "value": "pageNumber",
              "description": "Page number."
            },
            {
              "name": "title",
              "value": "title",
              "description": "Top-level title describing the entire document."
            },
            {
              "name": "sectionHeading",
              "value": "sectionHeading",
              "description": "Sub heading describing a section of the document."
            },
            {
              "name": "footnote",
              "value": "footnote",
              "description": "A note usually placed after the main content on a page."
            },
            {
              "name": "formulaBlock",
              "value": "formulaBlock",
              "description": "A block of formulas, often with shared alignment."
            }
          ]
        }
      },
      "QuotaDetails": {
        "required": [
          "quota",
          "quotaResetDateTime",
          "used"
        ],
        "type": "object",
        "properties": {
          "used": {
            "type": "integer",
            "description": "Amount of the resource quota used.",
            "format": "int32"
          },
          "quota": {
            "type": "integer",
            "description": "Resource quota limit.",
            "format": "int32"
          },
          "quotaResetDateTime": {
            "type": "string",
            "description": "Date/time when the resource quota usage will be reset.",
            "format": "date-time"
          }
        },
        "description": "Quota used, limit, and next reset date/time."
      },
      "ResourceDetails": {
        "required": [
          "customDocumentModels",
          "customNeuralDocumentModelBuilds"
        ],
        "type": "object",
        "properties": {
          "customDocumentModels": {
            "$ref": "#/components/schemas/CustomDocumentModelsDetails"
          },
          "customNeuralDocumentModelBuilds": {
            "$ref": "#/components/schemas/QuotaDetails"
          }
        },
        "description": "General information regarding the current resource."
      },
      "SplitMode": {
        "type": "string",
        "description": "Document splitting mode.",
        "enum": [
          "auto",
          "none",
          "perPage"
        ],
        "x-ms-enum": {
          "name": "SplitMode",
          "modelAsString": true,
          "values": [
            {
              "name": "auto",
              "value": "auto",
              "description": "Automatically split file into documents."
            },
            {
              "name": "none",
              "value": "none",
              "description": "Treat the entire file as a single document."
            },
            {
              "name": "perPage",
              "value": "perPage",
              "description": "Treat each page in the file as a separate document."
            }
          ]
        }
      },
      "StringIndexType": {
        "type": "string",
        "description": "Method used to compute string offset and length.",
        "enum": [
          "textElements",
          "unicodeCodePoint",
          "utf16CodeUnit"
        ],
        "x-ms-enum": {
          "name": "StringIndexType",
          "modelAsString": true,
          "values": [
            {
              "name": "textElements",
              "value": "textElements",
              "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
            },
            {
              "name": "unicodeCodePoint",
              "value": "unicodeCodePoint",
              "description": "Character unit represented by a single unicode code point.  Used by Python 3."
            },
            {
              "name": "utf16CodeUnit",
              "value": "utf16CodeUnit",
              "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
            }
          ]
        }
      },
      "Versions": {
        "type": "string",
        "description": "Service API versions.",
        "enum": [
          "2023-10-31-preview"
        ],
        "x-ms-enum": {
          "name": "Versions",
          "modelAsString": true,
          "values": [
            {
              "name": "v2023_10_31_preview",
              "value": "2023-10-31-preview",
              "description": "The 2023-10-31-preview version of the DocumentIntelligence service."
            }
          ]
        }
      }
    },
    "parameters": {
      "Azure.Core.Foundations.ApiVersionParameter": {
        "name": "api-version",
        "in": "query",
        "description": "The API version to use for this operation.",
        "required": true,
        "schema": {
          "minLength": 1,
          "type": "string",
          "x-ms-parameter-location": "method",
          "x-ms-client-name": "apiVersion"
        },
        "x-ms-parameter-location": "method",
        "x-ms-client-name": "apiVersion"
      },
      "DocumentClassifierAnalyzeRequestParams.classifierId": {
        "name": "classifierId",
        "in": "path",
        "description": "Unique document classifier name.",
        "required": true,
        "schema": {
          "maxLength": 64,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
          "type": "string",
          "x-ms-parameter-location": "method"
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentClassifierAnalyzeRequestParams.split": {
        "name": "split",
        "in": "query",
        "description": "Document splitting mode.",
        "schema": {
          "type": "string",
          "default": "none",
          "enum": [
            "auto",
            "none",
            "perPage"
          ],
          "x-ms-enum": {
            "name": "SplitMode",
            "modelAsString": true,
            "values": [
              {
                "name": "auto",
                "value": "auto",
                "description": "Automatically split file into documents."
              },
              {
                "name": "none",
                "value": "none",
                "description": "Treat the entire file as a single document."
              },
              {
                "name": "perPage",
                "value": "perPage",
                "description": "Treat each page in the file as a separate document."
              }
            ]
          },
          "x-ms-parameter-location": "method"
        },
        "x-ms-enum": {
          "name": "SplitMode",
          "modelAsString": true,
          "values": [
            {
              "name": "auto",
              "value": "auto",
              "description": "Automatically split file into documents."
            },
            {
              "name": "none",
              "value": "none",
              "description": "Treat the entire file as a single document."
            },
            {
              "name": "perPage",
              "value": "perPage",
              "description": "Treat each page in the file as a separate document."
            }
          ]
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentClassifierAnalyzeRequestParams.stringIndexType": {
        "name": "stringIndexType",
        "in": "query",
        "description": "Method used to compute string offset and length.",
        "schema": {
          "type": "string",
          "default": "textElements",
          "enum": [
            "textElements",
            "unicodeCodePoint",
            "utf16CodeUnit"
          ],
          "x-ms-enum": {
            "name": "StringIndexType",
            "modelAsString": true,
            "values": [
              {
                "name": "textElements",
                "value": "textElements",
                "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
              },
              {
                "name": "unicodeCodePoint",
                "value": "unicodeCodePoint",
                "description": "Character unit represented by a single unicode code point.  Used by Python 3."
              },
              {
                "name": "utf16CodeUnit",
                "value": "utf16CodeUnit",
                "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
              }
            ]
          },
          "x-ms-parameter-location": "method"
        },
        "x-ms-enum": {
          "name": "StringIndexType",
          "modelAsString": true,
          "values": [
            {
              "name": "textElements",
              "value": "textElements",
              "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
            },
            {
              "name": "unicodeCodePoint",
              "value": "unicodeCodePoint",
              "description": "Character unit represented by a single unicode code point.  Used by Python 3."
            },
            {
              "name": "utf16CodeUnit",
              "value": "utf16CodeUnit",
              "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
            }
          ]
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.features": {
        "name": "features",
        "in": "query",
        "description": "List of optional analysis features.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ocrHighResolution",
              "languages",
              "barcodes",
              "formulas",
              "keyValuePairs",
              "styleFont",
              "queryFields"
            ],
            "x-ms-enum": {
              "name": "DocumentAnalysisFeature",
              "modelAsString": true,
              "values": [
                {
                  "name": "ocrHighResolution",
                  "value": "ocrHighResolution",
                  "description": "Perform OCR at a higher resolution to handle documents with fine print."
                },
                {
                  "name": "languages",
                  "value": "languages",
                  "description": "Enable the detection of the text content language."
                },
                {
                  "name": "barcodes",
                  "value": "barcodes",
                  "description": "Enable the detection of barcodes in the document."
                },
                {
                  "name": "formulas",
                  "value": "formulas",
                  "description": "Enable the detection of mathematical expressions in the document."
                },
                {
                  "name": "keyValuePairs",
                  "value": "keyValuePairs",
                  "description": "Enable the detection of general key value pairs (form fields) in the document."
                },
                {
                  "name": "styleFont",
                  "value": "styleFont",
                  "description": "Enable the recognition of various font styles."
                },
                {
                  "name": "queryFields",
                  "value": "queryFields",
                  "description": "Enable the extraction of additional fields via the queryFields query parameter."
                }
              ]
            }
          },
          "x-ms-parameter-location": "method"
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.locale": {
        "name": "locale",
        "in": "query",
        "description": "Locale hint for text recognition and document analysis.  Value may contain only\nthe language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\").",
        "schema": {
          "type": "string",
          "x-ms-parameter-location": "method"
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.modelId": {
        "name": "modelId",
        "in": "path",
        "description": "Unique document model name.",
        "required": true,
        "schema": {
          "maxLength": 64,
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$",
          "type": "string",
          "x-ms-parameter-location": "method"
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.outputContentFormat": {
        "name": "outputContentFormat",
        "in": "query",
        "description": "Format of the analyze result top-level content.",
        "schema": {
          "type": "string",
          "default": "text",
          "enum": [
            "text",
            "markdown"
          ],
          "x-ms-enum": {
            "name": "ContentFormat",
            "modelAsString": true,
            "values": [
              {
                "name": "text",
                "value": "text",
                "description": "Plain text representation of the document content without any formatting."
              },
              {
                "name": "markdown",
                "value": "markdown",
                "description": "Markdown representation of the document content with section headings, tables,\netc."
              }
            ]
          },
          "x-ms-parameter-location": "method"
        },
        "x-ms-enum": {
          "name": "ContentFormat",
          "modelAsString": true,
          "values": [
            {
              "name": "text",
              "value": "text",
              "description": "Plain text representation of the document content without any formatting."
            },
            {
              "name": "markdown",
              "value": "markdown",
              "description": "Markdown representation of the document content with section headings, tables,\netc."
            }
          ]
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.pages": {
        "name": "pages",
        "in": "query",
        "description": "List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\"",
        "schema": {
          "pattern": "^(\\d+(-\\d+)?)(,\\s*(\\d+(-\\d+)?))*$",
          "type": "string",
          "x-ms-parameter-location": "method"
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.queryFields": {
        "name": "queryFields",
        "in": "query",
        "description": "List of additional fields to extract.  Ex. \"NumberOfGuests,StoreNumber\"",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-ms-parameter-location": "method"
        },
        "x-ms-parameter-location": "method"
      },
      "DocumentModelAnalyzeRequestParams.stringIndexType": {
        "name": "stringIndexType",
        "in": "query",
        "description": "Method used to compute string offset and length.",
        "schema": {
          "type": "string",
          "default": "textElements",
          "enum": [
            "textElements",
            "unicodeCodePoint",
            "utf16CodeUnit"
          ],
          "x-ms-enum": {
            "name": "StringIndexType",
            "modelAsString": true,
            "values": [
              {
                "name": "textElements",
                "value": "textElements",
                "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
              },
              {
                "name": "unicodeCodePoint",
                "value": "unicodeCodePoint",
                "description": "Character unit represented by a single unicode code point.  Used by Python 3."
              },
              {
                "name": "utf16CodeUnit",
                "value": "utf16CodeUnit",
                "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
              }
            ]
          },
          "x-ms-parameter-location": "method"
        },
        "x-ms-enum": {
          "name": "StringIndexType",
          "modelAsString": true,
          "values": [
            {
              "name": "textElements",
              "value": "textElements",
              "description": "User-perceived display character, or grapheme cluster, as defined by Unicode\n8.0.0."
            },
            {
              "name": "unicodeCodePoint",
              "value": "unicodeCodePoint",
              "description": "Character unit represented by a single unicode code point.  Used by Python 3."
            },
            {
              "name": "utf16CodeUnit",
              "value": "utf16CodeUnit",
              "description": "Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript,\nJava, and .NET."
            }
          ]
        },
        "x-ms-parameter-location": "method"
      }
    },
    "requestBodies": {
      "AnalyzeFromStreamRequestParams.input": {
        "description": "Input content.",
        "content": {
          "application/json": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        },
        "required": true,
        "x-ms-parameter-location": "method"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "Ocp-Apim-Subscription-Key",
        "in": "header"
      },
      "OAuth2Auth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
            "tokenUrl": "https://login.microsoftonline.com/common/oauth2/token",
            "scopes": {
              "https://cognitiveservices.azure.com/.default": ""
            }
          }
        }
      }
    }
  },
  "x-ms-parameterized-host": {
    "hostTemplate": "{endpoint}/documentintelligence",
    "useSchemePrefix": false,
    "parameters": [
      {
        "name": "endpoint",
        "in": "path",
        "description": "The Document Intelligence service endpoint.",
        "required": true,
        "type": "string"
      }
    ]
  },
  "x-ms-paths": {
    "/documentClassifiers/{classifierId}:analyze?_overload=classifyDocument": {
      "post": {
        "operationId": "DocumentClassifiers_ClassifyDocument",
        "description": "Classifies document with document classifier.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/DocumentClassifierAnalyzeRequestParams.classifierId"
          },
          {
            "$ref": "#/parameters/DocumentClassifierAnalyzeRequestParams.stringIndexType"
          },
          {
            "$ref": "#/parameters/DocumentClassifierAnalyzeRequestParams.split"
          },
          {
            "name": "classifyRequest",
            "in": "body",
            "description": "Classify request parameters.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClassifyDocumentRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of AnalyzeResultOperation"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Classify Document from Url": {
            "$ref": "./examples/ClassifyDocument_Url.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/documentModels/{modelId}:analyze?_overload=analyzeDocument": {
      "post": {
        "operationId": "DocumentModels_AnalyzeDocument",
        "description": "Analyzes document with document model.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.modelId"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.pages"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.locale"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.stringIndexType"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.features"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.queryFields"
          },
          {
            "$ref": "#/parameters/DocumentModelAnalyzeRequestParams.outputContentFormat"
          },
          {
            "name": "analyzeRequest",
            "in": "body",
            "description": "Analyze request parameters.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnalyzeDocumentRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but processing has not yet completed.",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "format": "uri",
                "description": "The location of an instance of AnalyzeResultOperation"
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Analyze Document from Base64": {
            "$ref": "./examples/AnalyzeDocument_Base64.json"
          },
          "Analyze Document from Url": {
            "$ref": "./examples/AnalyzeDocument_Url.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/operations/{operationId}?_overload=getDocumentModelComposeOperation": {
      "get": {
        "operationId": "MiscellaneousOperations_GetDocumentModelComposeOperation",
        "description": "Gets operation info.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DocumentModelComposeOperationDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Operation - Document Model Compose": {
            "$ref": "./examples/GetOperation_DocumentModelCompose.json"
          }
        }
      }
    },
    "/operations/{operationId}?_overload=getDocumentModelCopyToOperation": {
      "get": {
        "operationId": "MiscellaneousOperations_GetDocumentModelCopyToOperation",
        "description": "Gets operation info.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DocumentModelCopyToOperationDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Operation - Document Model Copy To": {
            "$ref": "./examples/GetOperation_DocumentModelCopyTo.json"
          }
        }
      }
    },
    "/operations/{operationId}?_overload=getDocumentClassifierBuildOperation": {
      "get": {
        "operationId": "MiscellaneousOperations_GetDocumentClassifierBuildOperation",
        "description": "Gets operation info.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DocumentClassifierBuildOperationDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Operation - Document Classifier Build": {
            "$ref": "./examples/GetOperation_DocumentClassifierBuild.json"
          }
        }
      }
    },
    "/operations/{operationId}?_overload=getOperation": {
      "get": {
        "operationId": "MiscellaneousOperations_GetOperation",
        "description": "Gets operation info.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation ID",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationDetails"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Get Operation": {
            "$ref": "./examples/GetOperation.json"
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}